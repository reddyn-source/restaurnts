{"version":3,"sources":["App.types.ts","RestaurantTable.tsx","ExtraInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FilterTypes","SortOrder","paginationButton","ExtraInformation","props","className","onClick","onClose","href","data","lat","long","target","rel","hours","split","tags","map","tag","RestaurntTable","stateQuery","genreQuery","searchQuery","onInputChange","filterRespectively","filterArray","restaurnts","onCoulumnHeaderClick","sortColumn","sortOrder","React","startIndex","setStartIndex","openPopUp","setOpenPopUp","popUpContent","setPopUpContent","onRowClick","event","id","currentTarget","dataset","filter","item","filteredRestaurnts","locallyFilteredRestaurnts","length","forEach","filterBy","toUseArrayToFilter","byGenres","filteredByGenres","genre","toLowerCase","includes","byState","filteredByState","state","filteredBySearch","name","city","sortedRestaurants","sort","a","b","Ascending","toUpperCase","sortArrow","String","fromCharCode","currentPage","setCurrentPage","maxPages","Math","ceil","onPaginationButtonClicked","left","type","value","data-field","bySearch","onChange","placeholder","data-testid","data-column","data-sort","i","push","onClickCapture","data-rowid","tabIndex","title","telephone","data-arrow","disabled","right","createPortal","document","body","App","useState","isLoading","setLoading","setData","filterValues","setFilterValues","setStateQuery","setGenreQuery","setSearchQuery","setSortCoumn","setSortOrder","useEffect","fetch","headers","Authorization","then","res","json","field","filterIndex","indexOf","slice","concat","column","order","Desending","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.02e08a6a.chunk.js","sourcesContent":["export interface IRestuarnt {\r\n    address1:string,\r\n    attire:string,\r\n    city:string,\r\n    genre:string,\r\n    hours:string,\r\n    id:string,\r\n    name:string,\r\n    lat:string,\r\n    long:string,\r\n    state:string,\r\n    tags:string,\r\n    telephone:string,\r\n    website:string,\r\n    zip:string\r\n  }\r\n\r\n  export enum FilterTypes {\r\n      byState = 'byState',\r\n      byGenres = 'byGenres',\r\n      bySearch = 'bySearch'\r\n  }\r\n\r\n  export type FilterItem = keyof typeof FilterTypes\r\n\r\n\r\n  export type FilterArray =  Array<FilterItem>\r\n\r\n  export enum SortOrder  {\r\n    Ascending = 'Ascending',\r\n    Desending = 'Desending'\r\n}\r\n\r\n","import * as React from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport { FilterArray, FilterTypes, FilterItem, IRestuarnt, SortOrder } from './App.types'\r\n\r\nimport { ExtraInformation } from './ExtraInfo'\r\n\r\nimport './RestaurantTable.css'\r\n\r\ntype ITableProps = {\r\n    restaurnts: IRestuarnt[]\r\n    stateQuery: string,\r\n    genreQuery: string,\r\n    searchQuery: string,\r\n    onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n    filterArray: FilterArray,\r\n    onCoulumnHeaderClick: (event: React.MouseEvent<HTMLTableHeaderCellElement>) => void,\r\n    sortColumn: string,\r\n    sortOrder: string\r\n}\r\n\r\n\r\n\r\ntype sortcolumn = 'name' | 'state'\r\n\r\nenum paginationButton {\r\n    left = \"left\",\r\n    right = 'right'\r\n}\r\n\r\nexport const RestaurntTable: React.FC<ITableProps> = (props: ITableProps) => {\r\n    const {\r\n        stateQuery = '',\r\n        genreQuery = '',\r\n        searchQuery = '',\r\n        onInputChange,\r\n        filterArray: filterRespectively,\r\n        restaurnts,\r\n        onCoulumnHeaderClick,\r\n        sortColumn,\r\n        sortOrder\r\n    } = props\r\n\r\n    const [startIndex, setStartIndex] = React.useState(0)\r\n    const [openPopUp, setOpenPopUp] = React.useState(false)\r\n    const [popUpContent, setPopUpContent] = React.useState<IRestuarnt>()\r\n    const onRowClick = (event: React.MouseEvent<HTMLTableRowElement>) => {\r\n        const id = (event.currentTarget as HTMLTableRowElement).dataset['rowid']\r\n        setPopUpContent(restaurnts.filter((item: IRestuarnt) => item.id === id)[0])\r\n        setOpenPopUp(true)\r\n    }\r\n    const onClosePopUp = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setOpenPopUp(false)\r\n    }\r\n    const filteredRestaurnts = React.useMemo(() => {\r\n        let locallyFilteredRestaurnts: IRestuarnt[] = []\r\n        if (filterRespectively.length > 0) {\r\n            filterRespectively.forEach((filterBy: FilterItem) => {\r\n                const toUseArrayToFilter = locallyFilteredRestaurnts.length > 0 ? locallyFilteredRestaurnts : restaurnts\r\n                if (filterBy === FilterTypes.byGenres) {\r\n                    const filteredByGenres = toUseArrayToFilter.filter((item: IRestuarnt) => {\r\n                        return item.genre.toLowerCase().includes(genreQuery.toLowerCase())\r\n                    })\r\n                    locallyFilteredRestaurnts = [...filteredByGenres]\r\n                }\r\n                else if (filterBy === FilterTypes.byState) {\r\n\r\n                    const filteredByState = toUseArrayToFilter.filter((item: IRestuarnt) => {\r\n                        return item.state.toLowerCase().includes(stateQuery.toLowerCase())\r\n                    })\r\n                    locallyFilteredRestaurnts = [...filteredByState]\r\n                }\r\n                else {\r\n                    const filteredBySearch = toUseArrayToFilter.filter((item: IRestuarnt) => {\r\n                        return (\r\n                            item.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n                            ||\r\n                            item.city.toLowerCase().includes(searchQuery.toLowerCase())\r\n                            ||\r\n                            item.genre.toLowerCase().includes(searchQuery.toLowerCase())\r\n                        )\r\n                    })\r\n                    locallyFilteredRestaurnts = [...filteredBySearch]\r\n                }\r\n            })\r\n            return locallyFilteredRestaurnts\r\n        } else {\r\n            return restaurnts\r\n        }\r\n    }, [stateQuery, genreQuery, searchQuery, restaurnts, filterRespectively])\r\n\r\n\r\n    const sortedRestaurants = [...filteredRestaurnts].sort((a: IRestuarnt, b: IRestuarnt) => {\r\n        if (sortOrder === SortOrder.Ascending) {\r\n            return a[sortColumn as sortcolumn].toUpperCase() > b[sortColumn as sortcolumn].toUpperCase() ? 1 : -1\r\n        } else {\r\n            return a[sortColumn as sortcolumn].toUpperCase() < b[sortColumn as sortcolumn].toUpperCase() ? 1 : -1\r\n        }\r\n    })\r\n\r\n    const sortArrow = sortOrder === SortOrder.Ascending ? String.fromCharCode(8595) : String.fromCharCode(8593)\r\n\r\n    const [currentPage, setCurrentPage] = React.useState(1)\r\n    const maxPages = Math.ceil(filteredRestaurnts.length / 10)\r\n    const onPaginationButtonClicked = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        const arrow = (event.target as HTMLButtonElement).dataset['arrow']\r\n        if (arrow === paginationButton.left) {\r\n            setCurrentPage(currentPage - 1)\r\n            setStartIndex(startIndex - 10)\r\n        } else {\r\n            setCurrentPage(currentPage + 1)\r\n            setStartIndex(startIndex + 10)\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        setCurrentPage(1)\r\n        setStartIndex(0)\r\n    }, [filteredRestaurnts])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"inputsearchcontainer\">\r\n                <div>\r\n                    <b>\r\n                        note:sort, search and filter will perform action on all pages instead of current page and will show the result\r\n                    </b>\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={searchQuery}\r\n                    data-field={FilterTypes.bySearch}\r\n                    onChange={onInputChange}\r\n                    placeholder={'search by name or city or genre'}\r\n                    data-testid='searchbox'\r\n                />\r\n            </div>\r\n            {\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th\r\n                                onClick={onCoulumnHeaderClick}\r\n                                data-column={'name'}\r\n                                data-sort={sortOrder}\r\n                                data-testid=\"namecolumn\"\r\n                            >\r\n                                {`Name  ${sortColumn === 'name' ? sortArrow : ''}`}\r\n                            </th>\r\n                            <th>City</th>\r\n                            <th\r\n                                onClick={onCoulumnHeaderClick}\r\n                                data-column={'state'}\r\n                                data-sort={sortOrder}\r\n                                data-testid=\"statecolumn\"\r\n                            >\r\n                                {`State  ${sortColumn === 'state' ? sortArrow : ''}`}\r\n                            </th>\r\n                            <th>Phone number</th>\r\n                            <th>Genres</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td />\r\n                            <td />\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={stateQuery}\r\n                                    data-field={FilterTypes.byState}\r\n                                    onChange={onInputChange}\r\n                                    placeholder={'filter by state'}\r\n                                    data-testid={'statefilter'}\r\n                                />\r\n                            </td>\r\n                            <td />\r\n                            <td>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={genreQuery}\r\n                                    data-field={FilterTypes.byGenres}\r\n                                    onChange={onInputChange}\r\n                                    placeholder={'filter by genre'}\r\n                                    data-testid={'genrefilter'}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        {\r\n                            (() => {\r\n                                const item: React.ReactNode[] = []\r\n                                for (let i = startIndex; i < startIndex + 10; i++) {\r\n                                    if (i >= sortedRestaurants.length) break;\r\n                                    item.push(\r\n                                        <tr\r\n                                            key={sortedRestaurants[i].id}\r\n                                            onClickCapture={onRowClick}\r\n                                            data-rowid={sortedRestaurants[i].id}\r\n                                            tabIndex={0}\r\n                                            data-testid=\"tablerow\"\r\n                                        >\r\n                                            <td\r\n                                                title={sortedRestaurants[i].name}\r\n                                            >\r\n                                                {sortedRestaurants[i].name}\r\n                                            </td>\r\n                                            <td\r\n                                                title={sortedRestaurants[i].city}\r\n                                            >\r\n                                                {sortedRestaurants[i].city\r\n                                                }\r\n                                            </td>\r\n                                            <td\r\n                                                title={sortedRestaurants[i].state}\r\n                                            >\r\n                                                {sortedRestaurants[i].state}\r\n                                            </td>\r\n                                            <td\r\n                                                title={sortedRestaurants[i].telephone}\r\n                                            >\r\n                                                {sortedRestaurants[i].telephone}\r\n                                            </td>\r\n                                            <td\r\n                                                title={sortedRestaurants[i].genre}\r\n                                            >\r\n                                                {sortedRestaurants[i].genre}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                                return item\r\n                            })()\r\n                        }\r\n\r\n                    </tbody>\r\n                    {\r\n                        maxPages > 0 && <tfoot>\r\n                            <tr>\r\n                                <td>\r\n                                    <button\r\n                                        onClick={onPaginationButtonClicked}\r\n                                        data-arrow={paginationButton.left}\r\n                                        disabled={currentPage === 1}\r\n                                    >\r\n                                        {'<'}\r\n                                    </button>\r\n                                    <span>{` ${currentPage} of ${maxPages}`} </span>\r\n                                    <button\r\n                                        onClick={onPaginationButtonClicked}\r\n                                        data-arrow={paginationButton.right}\r\n                                        disabled={currentPage === maxPages}\r\n                                    >\r\n                                        {'>'}\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                    }\r\n\r\n                </table>\r\n            }\r\n            {!!openPopUp && createPortal(<ExtraInformation\r\n                onClose={onClosePopUp}\r\n                data={popUpContent!}\r\n            />, document.body)}\r\n            {\r\n                maxPages === 0 && (\r\n                    <p className=\"noitem\">\r\n                        {'sorry no items to show please clear search 🤟'}\r\n                    </p>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}","import * as React from 'react'\r\nimport { IRestuarnt } from './App.types'\r\nimport './ExtraInfo.css'\r\n\r\ninterface IExtrainfoProps {\r\n    data: IRestuarnt\r\n    onClose: (event: React.MouseEvent<HTMLButtonElement>) => void\r\n}\r\n\r\nexport const ExtraInformation: React.FC<IExtrainfoProps> = (props: IExtrainfoProps) => {\r\n    return (\r\n        <>\r\n            <div className=\"popup\">\r\n                <div className=\"content\">\r\n                    <button className=\"close\" onClick={props.onClose}>X</button>\r\n                        <h3>some yummy info</h3>\r\n                    <p>\r\n                        <b>location</b>\r\n                        <div>\r\n                            <a\r\n                                href={`https://www.google.com/maps/place/${props.data.lat},${ props.data.long}`}\r\n                                target=\"_blank\"\r\n                                rel=\"noreferrer\" \r\n                            >\r\n                                open in google maps\r\n                            </a>\r\n                        </div>\r\n                    </p>\r\n                    <p>\r\n                        <b>opening timings</b>\r\n                        <div>{props.data.hours.split(\";\")[0]}</div>\r\n                        <div>{props.data.hours.split(\";\")[1]}</div>\r\n                    </p>\r\n                    <p>\r\n                        {\r\n                            props.data.tags.split(\",\").map((tag: string) => {\r\n                                return <span className=\"hastag\">{`#${tag}`}</span>\r\n                            })\r\n                        }\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { FilterArray, FilterTypes, FilterItem, IRestuarnt, SortOrder } from './App.types'\nimport { RestaurntTable } from './RestaurantTable'\n\nfunction App() {\n  const [isLoading, setLoading] = React.useState(true)\n  const [data, setData] = React.useState<IRestuarnt[]>([])\n  const [filterValues, setFilterValues] = React.useState<FilterArray>([])\n  const [stateQuery, setStateQuery] = React.useState('')\n  const [genreQuery, setGenreQuery] = React.useState('')\n  const [searchQuery,setSearchQuery] = React.useState('')\n  const [sortColumn, setSortCoumn] = React.useState<'name' | 'state'>('name')\n  const [sortOrder,setSortOrder] = React.useState<keyof typeof SortOrder>(SortOrder.Ascending)\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value\n    const field = event.target.dataset['field'] as FilterItem\n    const filterIndex = filterValues.indexOf(field)\n    switch (field) {\n      case FilterTypes.byGenres: setGenreQuery(value);\n        break;\n      case FilterTypes.byState: setStateQuery(value);\n        break;\n      case FilterTypes.bySearch:setSearchQuery(value);\n      break;\n      default: break;\n\n    }\n    if (value === '' && filterIndex > -1) {\n      setFilterValues(filterValues.slice(0, filterIndex).concat(filterValues.slice(filterIndex +1, filterValues.length)))\n    }\n    if (value !== '' && filterIndex < 0) {\n      setFilterValues([...filterValues, field])\n    }\n\n  }\n\n  const onCoulumnHeaderClick = (event:React.MouseEvent<HTMLTableHeaderCellElement>) => {\n     const column = (event.target as HTMLTableCellElement ).dataset['column']\n     const order =   (event.target as HTMLTableCellElement ).dataset['sort']\n     setSortCoumn(column as 'name' | 'state') \n     setSortOrder(order ===SortOrder.Ascending ? SortOrder.Desending: SortOrder.Ascending)\n  }\n\n  React.useEffect(() => {\n    fetch(\"https://code-challenge.spectrumtoolbox.com/api/restaurants\", {\n      headers: {\n        Authorization: 'Api-Key q3MNxtfep8Gt'\n      }\n    }).then((res) => res.json()).then((res: IRestuarnt[]) => {\n      setData(res)\n      setLoading(false)\n    })\n  }, [])\n  return (\n    <div className=\"App\">\n      {\n        isLoading ? 'iam loading' :\n          <RestaurntTable\n            restaurnts={data}\n            stateQuery={stateQuery}\n            genreQuery={genreQuery}\n            searchQuery={searchQuery}\n            onInputChange={onInputChange}\n            filterArray={filterValues}\n            onCoulumnHeaderClick={onCoulumnHeaderClick}\n            sortColumn={sortColumn}\n            sortOrder={sortOrder}\n          />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}